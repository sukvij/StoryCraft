package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os" // Used to access environment variables
	"time"

	"github.com/gin-gonic/gin"
	"github.com/joho/godotenv" // Import the godotenv package
)

// Gemini API structures for request and response
type Part struct {
	Text string `json:"text"`
}

type Content struct {
	Parts []Part `json:"parts"`
}

type GenerateContentRequest struct {
	Contents []Content `json:"contents"`
}

type Candidate struct {
	Content Content `json:"content"`
}

type GenerateContentResponse struct {
	Candidates []Candidate `json:"candidates"`
}

func main() {
	// Load environment variables from .env file
	// This should be done at the very beginning of your main function
	err := godotenv.Load()
	if err != nil {
		log.Fatalf("Error loading .env file, please ensure it exists and is correctly formatted: %v", err)
	}

	// Initialize Gin router
	router := gin.Default()

	// Retrieve API Key from environment variable (now loaded from .env)
	geminiAPIKey := os.Getenv("GEMINI_API_KEY")
	if geminiAPIKey == "" {
		log.Fatal("GEMINI_API_KEY environment variable not set in .env file. Please check your .env file.")
	}

	// Define a route for generating content
	router.POST("/generate", func(c *gin.Context) {
		var requestBody struct {
			Prompt string `json:"prompt"`
		}

		// Bind the JSON request body to the struct
		if err := c.ShouldBindJSON(&requestBody); err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": fmt.Sprintf("Invalid request body: %v", err)})
			return
		}

		// Prepare the request payload for Gemini API
		geminiRequest := GenerateContentRequest{
			Contents: []Content{
				{
					Parts: []Part{
						{Text: requestBody.Prompt},
					},
				},
			},
		}

		// Convert the request payload to JSON
		jsonPayload, err := json.Marshal(geminiRequest)
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": fmt.Sprintf("Failed to marshal request: %v", err)})
			return
		}

		// Construct the Gemini API URL
		// Using gemini-1.5-flash as an example, you can change the model as needed
		apiURL := fmt.Sprintf("https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=%s", geminiAPIKey)

		// Create a new HTTP client
		client := &http.Client{Timeout: 10 * time.Second}

		// Create a new POST request
		req, err := http.NewRequest("POST", apiURL, bytes.NewBuffer(jsonPayload))
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": fmt.Sprintf("Failed to create HTTP request: %v", err)})
			return
		}

		// Set the Content-Type header
		req.Header.Set("Content-Type", "application/json")

		// Send the request
		resp, err := client.Do(req)
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": fmt.Sprintf("Failed to send request to Gemini API: %v", err)})
			return
		}
		defer resp.Body.Close()

		// Read the response body
		responseBody, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": fmt.Sprintf("Failed to read response body: %v", err)})
			return
		}

		// Check for non-2xx status codes from Gemini API
		if resp.StatusCode != http.StatusOK {
			c.JSON(resp.StatusCode, gin.H{"error": fmt.Sprintf("Gemini API error: %s", string(responseBody))})
			return
		}

		// Parse the Gemini API response
		var geminiResponse GenerateContentResponse
		if err := json.Unmarshal(responseBody, &geminiResponse); err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": fmt.Sprintf("Failed to parse Gemini API response: %v", err)})
			return
		}

		// Extract the generated text
		if len(geminiResponse.Candidates) > 0 && len(geminiResponse.Candidates[0].Content.Parts) > 0 {
			generatedText := geminiResponse.Candidates[0].Content.Parts[0].Text
			c.JSON(http.StatusOK, gin.H{"generated_text": generatedText})
		} else {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "No content generated by Gemini API."})
		}
	})

	// Start the Gin server
	port := os.Getenv("PORT")
	if port == "" {
		port = "8080" // Default port if not specified
	}
	log.Printf("Server starting on port %s", port)
	if err := router.Run(":" + port); err != nil {
		log.Fatalf("Failed to run server: %v", err)
	}
}
